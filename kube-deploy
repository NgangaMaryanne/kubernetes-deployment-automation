#!/usr/bin/env python
import os
import sys
from subprocess import Popen, PIPE, call
#getting the current directory will be important to remove cloned repository.
CURRENT_DIRECTORY = os.getcwd()
MICRO_DEPLOYMENT_SCRIPTS_REPOSITORY = "git@github.com:andela/micro-deployment-scripts.git"
STAGING_CONTEXT = "gke_microservices-kube_us-east1-c_staging"
PRODUCTION_CONTEXT = "gke_andela-kube_us-east1-b_andela-prod"
def usage():
    pass
def check_space():
    #once the script is initialised, check if user has enough space to use tool.
    pass
def get_users_current_kubectl_context():
    pass
def generate_scripts(environment, micro_service):
    # CLone repository
    call(['/usr/bin/git', 'clone', MICRO_DEPLOYMENT_SCRIPTS_REPOSITORY])
    os.chdir("micro-deployment-scripts")
    os.system("pwd")
    #checkout develop branch of repository
    call(['/usr/bin/git', 'chcekout', 'develop'])
    generated_scrits = lambda: call (["./gen_services.sh",  "{}".format(environment), "{}".format(micro_service)])
    print generated_scrits()
    if generated_scrits() == 1:
        #check that maybe its a front-end app
        print "true"
        os.chdir("apps")
        os.system("pwd")
        generated_apps = lambda: call (["./gen_apps.sh", "{}".format(environment), "{}".format(micro_service)])
        if generated_apps == 1:
            print "Could not generate script. Please try again"
            sys.exit()
    if environment == "staging":
        #connect to staging kubectl context
        call (["kubectl", "config", "use-context", "{}".format(STAGING_CONTEXT )])
        #generate stating script for specified micro-servcie
        call (["kubectl", "get", "deployments/{}".format(micro_service), "-o", "yaml", ">" , " {}.yaml".format(environment, micro_service)])
    else:
        call (["kubectl", "config", "use-context", {}.format(PRODUCTION_CONTEXT )])
        call (["kubectl", "get", "deployments/{}".format(micro_service), "-o", "yaml", ">" , "{}.yaml".format(environment, micro_service)])

def compare():
    # Use conversions from yaml to dictionaries and others to compare the two files 
    #if differences, call the differences shower.differences
    #if no differences then call the deploy function.
    pass

def differences_show():
    #would you like to cintinue? if yes?
    #call the deploy function
    pass

def deploy():
    #connect to specified environment cluster and apply the deploymente
    pass

if __name__ == '__main__':
    micro_service =  sys.argv[2:][0]
    environment =  sys.argv[3:][0]
    generate_scripts(environment, micro_service)
