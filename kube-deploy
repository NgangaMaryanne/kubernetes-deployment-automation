#!/usr/bin/env python
import os
import sys
import subprocess
#getting the current directory will be important to remove cloned repository.
CURRENT_DIRECTORY = os.getcwd()
MICRO_DEPLOYMENT_SCRIPTS_REPOSITORY = "git@github.com:andela/micro-deployment-scripts.git"
STAGING_CONTEXT = "gke_microservices-kube_us-east1-c_staging"
PRODUCTION_CONTEXT = "gke_andela-kube_us-east1-b_andela-prod"
FRONT_END_APPS = ["fis", "allocation", "admin", "pulse-front", "skilltree", "portal", "kaizen", "portal", "vof"]
def usage():
    pass
def check_space():
    #once the script is initialised, check if user has enough space to use tool.
    pass
def get_users_current_kubectl_context():
    pass
def generate_scripts(environment, micro_service):
    # CLone repository
    os.system("/usr/bin/git clone {}".format(MICRO_DEPLOYMENT_SCRIPTS_REPOSITORY))
    os.chdir("micro-deployment-scripts")
    os.system("pwd")
    #checkout develop branch of repository
    os.system("/usr/bin/git checkout develop")
    if micro_service in FRONT_END_APPS:
        os.chdir("apps")
        os.system("pwd")
        os.system("./gen_apps.sh {} {}".format(environment, micro_service))
    else:
        os.system("./gen_services.sh {} {}".format(environment, micro_service))

    if environment == "staging":
        #user will have to have credentials to access the said context.
        #connect to staging kubectl context
        os.system("kubectl config use-context {}".format(STAGING_CONTEXT ))
        #generate script for specified micro-service in the working directory (kubernetes-deployment-automation)
        os.system("kubectl get deployments/{} -o yaml > {}/{}.yaml".format(micro_service, CURRENT_DIRECTORY, micro_service))
    else:
        os.system ("kubectl config use-context", {}.format(PRODUCTION_CONTEXT ))
        os.system ("kubectl get deployments/{} -o yaml > {}/{}.yaml".format(micro_service, CURRENT_DIRECTORY, micro_service))
    # deploy()
def compare():
    # Use conversions from yaml to dictionaries and others to compare the two files 
    #if differences, call the differences shower.differences
    #if no differences then call the deploy function.
    pass

def differences_show():
    #would you like to cintinue? if yes?
    #call the deploy function
    pass

def deploy():
    #add command to apply deployment
    #cleanup
    #cleanup()
    pass

def cleanup():
    os.chdir(CURRENT_DIRECTORY)
    os.system("pwd")
    os.system("rm -rf micro-deployment-scripts")
    pass

if __name__ == '__main__':
    micro_service =  sys.argv[2:][0]
    environment =  sys.argv[3:][0]
    generate_scripts(environment, micro_service)
